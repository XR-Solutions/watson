using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Watson.Core.Entities;

namespace Watson.Application.Services
{
	public static class PdfService
	{
		public static async Task<PdfFileInfo> GenerateSamplePdf(IEnumerable<Note> notes, IEnumerable<NoteImage> noteImages)
		{
			try
			{
				byte[] pdfBytes;

				Document document = Document.Create(container =>
				{
					container.Page(page =>
					{
						page.Size(PageSizes.A4);
						page.Margin(2, Unit.Centimetre);
						page.PageColor(Colors.White);
						page.DefaultTextStyle(x => x.FontSize(11).FontFamily("Arial", "Calibri", "Tahoma"));

						page.Content().Column(column =>
						{
							column.Item().Text("Aantekeningen").FontSize(32).Bold();
							column.Item().PaddingVertical(10).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);

							foreach (var note in notes)
							{
								column.Item().PaddingBottom(10).Column(noteColumn =>
								{
									noteColumn.Item().Text(note.Name).FontSize(14).Bold().Underline();

									noteColumn.Item().PaddingTop(5).Text("Description:").Bold();
									noteColumn.Item().Text(note.Description).FontSize(12);

									noteColumn.Item().PaddingTop(5).Text("Location (in meters):").Bold();
									noteColumn.Item().Text($"X: {note.ObjectMetadata.Position[0]} m, Y: {note.ObjectMetadata.Position[1]} m, Z: {note.ObjectMetadata.Position[2]} m").FontSize(10);

									noteColumn.Item().PaddingTop(5).Text("Orientation (Euler angles in degrees):").Bold();
									noteColumn.Item().Text($"X: {note.ObjectMetadata.Rotation[0]}°, Y: {note.ObjectMetadata.Rotation[1]}°, Z: {note.ObjectMetadata.Rotation[2]}°").FontSize(10);

									noteColumn.Item().PaddingTop(5).Text("Size (in meters):").Bold();
									noteColumn.Item().Text($"Width: {note.ObjectMetadata.Scale[0]} m, Height: {note.ObjectMetadata.Scale[1]} m, Depth: {note.ObjectMetadata.Scale[2]} m").FontSize(10);

									noteColumn.Item().PaddingTop(5).Text("Status:").Bold();
									noteColumn.Item().Text(note.ObjectMetadata.Enabled ? "Active" : "Inactive").FontSize(10);

									noteColumn.Item().PaddingTop(5).Text("Trace Type:").Bold();
									noteColumn.Item().Text(note.TraceType.ToString()).FontSize(10);
								});

								column.Item().PaddingVertical(10).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);

								column.Item().PageBreak();
							}

							column.Item().Text("Bijlagen").FontSize(14).Bold().Underline();
							foreach (var note2 in notes)
							{
								column.Item().PaddingVertical(10).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);
								column.Item().Text(note2.Name).FontSize(32);
								var images = noteImages.Where(img => img.NoteId == note2.Guid);

								foreach (var image in images)
								{
									if (!string.IsNullOrEmpty(image.ImageBase64))
									{
										var imageBytes = Convert.FromBase64String(image.ImageBase64);

										column.Item().PaddingBottom(10).Column(noteColumn =>
										{
											noteColumn.Item().Image(imageBytes);
										});
									}
								}
							}
						});

						page.Footer().Row(row =>
						{
							row.RelativeColumn().AlignLeft().Text("THIS IS GENERATED BY WATSON").FontSize(9);
							row.RelativeColumn().AlignRight().Text(text =>
							{
								text.Span("Page ");
								text.CurrentPageNumber();
								text.Span(" of ");
								text.TotalPages();
							});
						});
					});
				});

				pdfBytes = document.GeneratePdf();

				return new PdfFileInfo()
				{
					ByteArray = pdfBytes,
					FileName = "sporenmatrix.pdf",
					MimeType = "application/pdf"
				};
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}

		public static byte[] GenerateOutOfRangePage()
		{
			Document document = Document.Create(container =>
			{
				container.Page(page =>
				{
					page.Size(PageSizes.A4);
					page.Margin(2, Unit.Centimetre);
					page.PageColor(Colors.White);
					page.DefaultTextStyle(x => x.FontSize(11).FontFamily("Arial", "Calibri", "Tahoma"));

					page.Content().Column(column =>
					{
						column.Item().Text("Page Number Out of Range").FontSize(32).Bold().AlignCenter();
						column.Item().PaddingVertical(20).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);
						column.Item().Text("The page number you requested is out of range. Please check the available page numbers and try again.").FontSize(14).AlignCenter();
					});

					page.Footer().AlignCenter().Text(x =>
					{
						x.Span("THIS IS GENERATED BY WATSON").FontSize(9);
					});
				});
			});

			return document.GeneratePdf();
		}
	}
}
